import UIKit

var greeting = "Hello, playground"

/*:
## 16.1 UIKit과 인터페이스 빌더
 ---
 * SwiftUI 도입이전에는 iOS 소프트웨어 개발 키트를 구성하는 여러 프레임워크와 함께 UIKit을 이용하여 iOS앱을 만듦
 * Xcode에는 인터페이스 빌더라는 도구가 있어서, 앱을 구성하는 각각의 화면을 담은 스토리보드를 생성할 수 있게해준다.
 * 인스펙터 패널을 통해서 컴포넌트의 속성을 바꿀 수 있다.
 * 컴포넌트와 다른 컴포넌트의 관계를 컨스트레인트로 결정한다.
 * 컴포넌트에 이벤트가 있다면 해당 이벤트를 처리하는 앱 소스코드의 메서드와 연결된다.
 * 시뮬레이터나 디바이스에서 앱을 컴파일하고 실행해야 예상대로 작동되는지 확인 가능하다
 */

/*:
 ## 16.2 SwiftUI의 선언적 구문
 * SwiftUI에는 UIKit과 인터페이스 빌더를 사용하여 사용자 인터페이스 레이아웃을 설계하고 동작을 구현하는 것과 완전히 다른 선언적 구문이 도입됨.
 * SwiftUI는 직관적이고 단순한 구문을 이용하며 화면을 기술할 수 있게해준다.
 * UIKit처럼 레이아웃이 실제로 구축되는 방식의 복잡함에 대해 고민할 필요 없이 SwiftUI는사용자 인터페이스가 어떤 모양이어야하는지를 선언하는 방식으로 레이아웃 생성 가능하다.
 * SwiftUI는 기본적으로 레이아웃에 포함될 컴포넌트들을 선언하고, 그것들이 포함될 레이아웃 매니저 종류 ( VStack, HStack, Form 등)를 명시하고, 속성( 버튼의 텍스트, 레이블의 포그라운드 색상,탭 제스처 이벤트에 대한 호출될 메서드 등 )을 설정하기 위하여 수정자(Modifier)를 사용함.
 * 위처럼 선언하면 레이아웃의 위치와 컨스트레인트 그리고 렌더링 방법에 대한 모든 복잡한 세부사항은 SwiftUI가 자동으로 처리한다.
 * SwiftUI 선언은 계층적으로 구조화 되어있다.-> 작고 재사용이 가능한 사용자 정의 하위뷰와 함께 구성하면 복잡한 뷰를 생성할 수 있다
 * 라이브 프리뷰 모드로 시뮬레이터나 디바이스에 빌드하고 실행하지 않아도 프리뷰 컨버스내에서 앱을 실행해서 앱을 테스트할 수 있다.

 */
/*:
 ## 16.3 SwiftUI는 데이터 주도적이다.
 
 * SwiftUI가 데이터 주도적이지만, 사용자에 의해 생성되는 이벤트( 사용자와 앱의 사용자 인터페이스 간의 상호작용)를 더이상 처리할 필요가 없다는 말은 아니다.
 * 사용자가 버튼을 눌렀을 때를 알아야 하며 어떤 반응을 하도록 하는것은 여전히 필요하다.
 * Swift 이전에는 앱 내에 있는 데이터의 현재 값 검사하려면 그에 대한 코드를 앱에 포함해야함.
 -> 즉, 실시간 데이터를 최신 상태를 항상 반영하도록하는 추가적인 코드를 작성해야함. ( 소스코드 복잡성 증가 )
 * SwiftUI는 앱의 데이터 모델과 사용자 인터페이스 컴포넌트, 기능을 제공하는 로직을 바인딩하는 여러 방법으로 복잡호 해결
 * 데이터 주도로 구현하면 데이터 모델은 앱의 다른 부분에서 구독할 수 있는 데이터 변수를 게시하게 된다.
 -> 이러한 방법으로 데이터가 변경되었다는 사실을 모든 구독자에게 자동으로 알릴 수 있음.
 * 사용자 인터페이스 컴포넌트와 데이터 모델이 바인딩이 되면 추가적인 코드 없이도 모든 데이터의 변경사항을 SwiftUI가 사용자 인터페이스에 자동으로 반영 -> 실시간 최신 데이터 쉽게 보장
 */

//:> 데이터 주도라는 것은 앱 데이터와 앱의 사용자 인터페이스 및 로직 사이의 관계에 대한 의미다.


/*:
 ## 16.4 SwiftUI VS UIKit
 
 * SwiftUI와 UIKit은 상호 베타적이지 않다. -> 둘 다 함께 사용하는 방법은 다양하게 존재.
 * iOS를 사용하는 디바이스 타깃의 프로젝트가 아니라면 ( 하드웨어단 즉 Bluetooth 연결, 센서 데이터 실시간 제어, ARKit, Metal등 고성능 그래픽처리 ) SwiftUI 선정.
 ->그러나, 모든 디바이스 수준 API를 세밀하게 조정원하면 UIKit이 유리함.
 * UIKit으로 개발된 앱을 가지고 있으면, 해당 코드들을 SwiftUI로 변환하는게 쉽지 않은 상황이면 그냥 UIKit 사용하는게 편하다.
 * UIKit은 앱 개발 도구중에 중요한 부분으로 계속 존재할 것이다. -> 가까운 미래에 계속 애플이 확장할것을 예시
 -> 새로운 기능을 추가할 경우에는 SwiftUI를 이용하여 기존의 UIKit코드에 통합할 것을 추천한다.
 * 새로운 프젝에서 SwiftUI를 쓰기로 했다고 해도 UIKit을 전혀 사용하지 않는 것은 아마도 불가능.
 * 매우 복잡한 사용자 인터페이스 레이아웃 설계시에 SwiftUI 레이아웃 컨테이너 뷰 사용이 만족스럽지 않은 상황에서는 인터페이스 빌더를 사용해야할 수도 있음.
 
 */

//:> 지도, 웹뷰를 통합해야하는 식의 특정기능은 여전히 UIKit 사용

/*:
 ## 16 챕터 요약
 SwiftUI는 UIKit와 인터페이스 빌더가 제공하는 앱 개발방식과는 다른 방법을 도입하였다. SwiftUI는 사용자 인터페이스 렌더링을 직접적으로 구현하는 방식이 아니라, 선언적 구문으로 사용자 인터페이스를 선언하고 앱이 실행될 때 렌더링을 수행하는 최선의 방법을 결정하기 위한모든 작업을한다.
 
 즉, SwiftUI는 UIKit처럼 직접 그리는방식이 아니라, 어떻게 보여줄지 선언만하면 알아서 처리해준다.또, SwiftUI가 기기 상황, 성능, 상태 변화 등을 고려해 최적화된 방식으로 뷰를 다시 그림을 말함.
 
 데이터 주도적이라함은, 데이터 변화가 앱의 동작과 모양을 주도한다는 점에서 데이터 주도적이다.
 게시자와 구독자모델을 통해 이뤄진다.
 */
